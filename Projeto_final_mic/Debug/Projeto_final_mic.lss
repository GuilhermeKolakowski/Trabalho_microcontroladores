
Projeto_final_mic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000032b  000003df  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000003df  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  0000040e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c16  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000762  00000000  00000000  000010a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b4  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000225  00000000  00000000  00001c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000143  00000000  00000000  00001e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000031c  0000031c  000003d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002010  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.enviar_mensagem 0000005a  000001aa  000001aa  0000025e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.receber_mensagem 00000022  00000288  00000288  0000033c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.ativar_pwmA 00000014  000002f4  000002f4  000003a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ativar_pwmB 00000014  00000308  00000308  000003bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.set_dutyA 0000001a  000002aa  000002aa  0000035e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.set_dutyB 0000001a  000002c4  000002c4  00000378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .progmemx.data 0000007a  000000c8  000000c8  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 21 .text.exibir_menu 00000034  00000204  00000204  000002b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    00000068  00000142  00000142  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .data.select_sentido 00000001  00800100  0000032a  000003de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 24 .bss.menu_exibido 00000001  00800101  00800101  000003df  2**0
                  ALLOC
 25 .text.libgcc.div 00000028  00000238  00000238  000002ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.libgcc.div 00000028  00000260  00000260  00000314  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_fini 00000002  00000324  00000324  000003d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_funcs_on_exit 00000002  00000326  00000326  000003da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_simulator_exit 00000002  00000328  00000328  000003dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.exit    00000016  000002de  000002de  00000392  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text._Exit   00000004  00000320  00000320  000003d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
   8:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
   c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  10:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  14:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  18:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  1c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  20:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  24:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  28:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  2c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  30:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  34:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  38:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  3c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  40:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  44:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  48:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  4c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  50:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  54:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  58:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  5c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  60:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
  64:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	00 03       	mulsu	r16, r16
  6e:	2a 01       	movw	r4, r20
  70:	01 01       	movw	r0, r2
  72:	02 80       	ldd	r0, Z+2	; 0x02

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  c0:	0c 94 6f 01 	jmp	0x2de	; 0x2de <exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

0000031c <__bad_interrupt>:
 31c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.enviar_mensagem:

000001aa <enviar_mensagem>:

uint8_t menu_exibido = 0;
uint8_t select_sentido = 1;

// ----------- UART -----------
void enviar_mensagem(const char *mensagem_enviada) {
 1aa:	cf 92       	push	r12
 1ac:	df 92       	push	r13
 1ae:	ef 92       	push	r14
 1b0:	6b 01       	movw	r12, r22
 1b2:	e8 2e       	mov	r14, r24
	for (int i = 0; i < tam_string; i++) {
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	15 c0       	rjmp	.+42     	; 0x1e4 <enviar_mensagem+0x3a>
		while ((UCSR0A & (1 << UDRE0)) == 0) {
 1ba:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1be:	85 ff       	sbrs	r24, 5
 1c0:	fc cf       	rjmp	.-8      	; 0x1ba <enviar_mensagem+0x10>
			// Espera at? o buffer estar pronto para envio
		}

		if (mensagem_enviada[i] == 0) {
 1c2:	ae 2d       	mov	r26, r14
 1c4:	c6 01       	movw	r24, r12
 1c6:	82 0f       	add	r24, r18
 1c8:	93 1f       	adc	r25, r19
 1ca:	a1 1d       	adc	r26, r1
 1cc:	37 fd       	sbrc	r19, 7
 1ce:	aa 95       	dec	r26
 1d0:	fc 01       	movw	r30, r24
 1d2:	84 91       	lpm	r24, Z
 1d4:	a7 fd       	sbrc	r26, 7
 1d6:	80 81       	ld	r24, Z
 1d8:	88 23       	and	r24, r24
 1da:	39 f0       	breq	.+14     	; 0x1ea <enviar_mensagem+0x40>
			break; // Fim da string
		}
		UDR0 = mensagem_enviada[i];
 1dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
uint8_t menu_exibido = 0;
uint8_t select_sentido = 1;

// ----------- UART -----------
void enviar_mensagem(const char *mensagem_enviada) {
	for (int i = 0; i < tam_string; i++) {
 1e0:	2f 5f       	subi	r18, 0xFF	; 255
 1e2:	3f 4f       	sbci	r19, 0xFF	; 255
 1e4:	24 36       	cpi	r18, 0x64	; 100
 1e6:	31 05       	cpc	r19, r1
 1e8:	44 f3       	brlt	.-48     	; 0x1ba <enviar_mensagem+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	8f e3       	ldi	r24, 0x3F	; 63
 1ec:	9c e9       	ldi	r25, 0x9C	; 156
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <enviar_mensagem+0x44>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <enviar_mensagem+0x4a>
 1f4:	00 00       	nop
			break; // Fim da string
		}
		UDR0 = mensagem_enviada[i];
	}
	_delay_ms(10);
	UDR0 = '\n';
 1f6:	8a e0       	ldi	r24, 0x0A	; 10
 1f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 1fc:	ef 90       	pop	r14
 1fe:	df 90       	pop	r13
 200:	cf 90       	pop	r12
 202:	08 95       	ret

Disassembly of section .text.receber_mensagem:

00000288 <receber_mensagem>:
void receber_mensagem(){
	if((UCSR0A & (1<<RXC0)) != 0){
 288:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 28c:	88 23       	and	r24, r24
 28e:	64 f4       	brge	.+24     	; 0x2a8 <receber_mensagem+0x20>
		//Verifica se tem algo para receber
		char byte_recebido = UDR0;
 290:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		if(byte_recebido == '1'){
 294:	81 33       	cpi	r24, 0x31	; 49
 296:	21 f4       	brne	.+8      	; 0x2a0 <receber_mensagem+0x18>
			select_sentido = 1;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 29e:	08 95       	ret
		}else if(byte_recebido == '0'){
 2a0:	80 33       	cpi	r24, 0x30	; 48
 2a2:	11 f4       	brne	.+4      	; 0x2a8 <receber_mensagem+0x20>
			select_sentido = 0;
 2a4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 2a8:	08 95       	ret

Disassembly of section .text.ativar_pwmA:

000002f4 <ativar_pwmA>:
}

// ----------- PWM CONFIG -----------

void ativar_pwmA() {
	TCCR0A |=  (1 << COM0A1); // Ativa OC0A (PD6)
 2f4:	84 b5       	in	r24, 0x24	; 36
 2f6:	80 68       	ori	r24, 0x80	; 128
 2f8:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1 << COM0B1); // Desativa OC0B (PD5)
 2fa:	84 b5       	in	r24, 0x24	; 36
 2fc:	8f 7d       	andi	r24, 0xDF	; 223
 2fe:	84 bd       	out	0x24, r24	; 36
	PORTD &= ~(1 << PD5);     // Garante PD5 em 0V
 300:	8b b1       	in	r24, 0x0b	; 11
 302:	8f 7d       	andi	r24, 0xDF	; 223
 304:	8b b9       	out	0x0b, r24	; 11
 306:	08 95       	ret

Disassembly of section .text.ativar_pwmB:

00000308 <ativar_pwmB>:
}

void ativar_pwmB() {
	TCCR0A |=  (1 << COM0B1); // Ativa OC0B (PD5)
 308:	84 b5       	in	r24, 0x24	; 36
 30a:	80 62       	ori	r24, 0x20	; 32
 30c:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1 << COM0A1); // Desativa OC0A (PD6)
 30e:	84 b5       	in	r24, 0x24	; 36
 310:	8f 77       	andi	r24, 0x7F	; 127
 312:	84 bd       	out	0x24, r24	; 36
	PORTD &= ~(1 << PD6);     // Garante PD6 em 0V
 314:	8b b1       	in	r24, 0x0b	; 11
 316:	8f 7b       	andi	r24, 0xBF	; 191
 318:	8b b9       	out	0x0b, r24	; 11
 31a:	08 95       	ret

Disassembly of section .text.set_dutyA:

000002aa <set_dutyA>:
}

void set_dutyA(uint8_t porcentagem) {
	if (porcentagem > 100) {
 2aa:	85 36       	cpi	r24, 0x65	; 101
 2ac:	08 f0       	brcs	.+2      	; 0x2b0 <set_dutyA+0x6>
		porcentagem = 100;
 2ae:	84 e6       	ldi	r24, 0x64	; 100
	}
	OCR0A = (porcentagem * 255) / 100;
 2b0:	2f ef       	ldi	r18, 0xFF	; 255
 2b2:	82 9f       	mul	r24, r18
 2b4:	c0 01       	movw	r24, r0
 2b6:	11 24       	eor	r1, r1
 2b8:	64 e6       	ldi	r22, 0x64	; 100
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	0e 94 1c 01 	call	0x238	; 0x238 <__divmodhi4>
 2c0:	67 bd       	out	0x27, r22	; 39
 2c2:	08 95       	ret

Disassembly of section .text.set_dutyB:

000002c4 <set_dutyB>:
}

void set_dutyB(uint8_t porcentagem) {
	if (porcentagem > 100) {
 2c4:	85 36       	cpi	r24, 0x65	; 101
 2c6:	08 f0       	brcs	.+2      	; 0x2ca <set_dutyB+0x6>
		porcentagem = 100;
 2c8:	84 e6       	ldi	r24, 0x64	; 100
	}
	OCR0B = (porcentagem * 255) / 100;
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	82 9f       	mul	r24, r18
 2ce:	c0 01       	movw	r24, r0
 2d0:	11 24       	eor	r1, r1
 2d2:	64 e6       	ldi	r22, 0x64	; 100
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	0e 94 1c 01 	call	0x238	; 0x238 <__divmodhi4>
 2da:	68 bd       	out	0x28, r22	; 40
 2dc:	08 95       	ret

Disassembly of section .text.exibir_menu:

00000204 <exibir_menu>:
}

void exibir_menu() {
	enviar_mensagem("----- MENU -----");
 204:	68 ec       	ldi	r22, 0xC8	; 200
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <enviar_mensagem>
	enviar_mensagem("1. Selecionar sentido (0 = A | 1 = B)");
 20e:	69 ed       	ldi	r22, 0xD9	; 217
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 d5 00 	call	0x1aa	; 0x1aa <enviar_mensagem>
	enviar_mensagem("2. Setar PWM (0 a 100)");
 218:	6f ef       	ldi	r22, 0xFF	; 255
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <enviar_mensagem>
	enviar_mensagem("3. Exibir RPM e PWM atual");
 222:	66 e1       	ldi	r22, 0x16	; 22
 224:	71 e0       	ldi	r23, 0x01	; 1
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 d5 00 	call	0x1aa	; 0x1aa <enviar_mensagem>
	enviar_mensagem("Digite uma opcao:");
 22c:	60 e3       	ldi	r22, 0x30	; 48
 22e:	71 e0       	ldi	r23, 0x01	; 1
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 d5 00 	call	0x1aa	; 0x1aa <enviar_mensagem>
 236:	08 95       	ret

Disassembly of section .text.main:

00000142 <main>:
}

int main(void) {

	// PD5 e PD6 como saida
	DDRD |= (1 << DDD6) | (1 << DDD5);
 142:	8a b1       	in	r24, 0x0a	; 10
 144:	80 66       	ori	r24, 0x60	; 96
 146:	8a b9       	out	0x0a, r24	; 10

	// PWM Timer0 - Fast PWM
	TCCR0A |= (1 << WGM01) | (1 << WGM00);
 148:	84 b5       	in	r24, 0x24	; 36
 14a:	83 60       	ori	r24, 0x03	; 3
 14c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00); // Prescaler 64 (976 Hz)
 14e:	85 b5       	in	r24, 0x25	; 37
 150:	83 60       	ori	r24, 0x03	; 3
 152:	85 bd       	out	0x25, r24	; 37


	//Comunicacao serial
	UBRR0 = 103; //CONFIGURANDO BAUD RATE = 9600 pois u2x0 ? 0
 154:	87 e6       	ldi	r24, 0x67	; 103
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 15c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0A = 0; // U2X0 = 0 (AFETA O BAUDRATE) se U2X0 = 1 muda a formula e pega metade da frequencia
 160:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); // 0b00011000
 164:	88 e1       	ldi	r24, 0x18	; 24
 166:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = 0b00000110; //00 para setar assincrono. UPM1 E UMP0 desligados. USBS mexe no stopbit, final da informa??o longo ou curto. Setando UCsZ1 e 0 para 8bits. UCPOLmodo assincrono ? 0
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	while (1) {
		if(menu_exibido == 0){ //exibir o menu 1 vez
 170:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <menu_exibido>
 174:	81 11       	cpse	r24, r1
 176:	05 c0       	rjmp	.+10     	; 0x182 <main+0x40>
			exibir_menu();
 178:	0e 94 02 01 	call	0x204	; 0x204 <exibir_menu>
			menu_exibido = 1;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <menu_exibido>
		}
		if (select_sentido == 0) {
 182:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 186:	81 11       	cpse	r24, r1
 188:	06 c0       	rjmp	.+12     	; 0x196 <main+0x54>
			ativar_pwmA();
 18a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <ativar_pwmA>
			set_dutyA(50);
 18e:	82 e3       	ldi	r24, 0x32	; 50
 190:	0e 94 55 01 	call	0x2aa	; 0x2aa <set_dutyA>
 194:	07 c0       	rjmp	.+14     	; 0x1a4 <main+0x62>
		} else if(select_sentido == 1) {
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	29 f4       	brne	.+10     	; 0x1a4 <main+0x62>
			ativar_pwmB();
 19a:	0e 94 84 01 	call	0x308	; 0x308 <ativar_pwmB>
			set_dutyB(50);
 19e:	82 e3       	ldi	r24, 0x32	; 50
 1a0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <set_dutyB>
		}else{
			//	Enviar uma mensagem de erro
			//enviar_mensagem("DIRECAO INVALIDA");
		}
		receber_mensagem();
 1a4:	0e 94 44 01 	call	0x288	; 0x288 <receber_mensagem>
	}
 1a8:	e3 cf       	rjmp	.-58     	; 0x170 <main+0x2e>

Disassembly of section .text.libgcc.div:

00000238 <__divmodhi4>:
 238:	97 fb       	bst	r25, 7
 23a:	07 2e       	mov	r0, r23
 23c:	16 f4       	brtc	.+4      	; 0x242 <__divmodhi4+0xa>
 23e:	00 94       	com	r0
 240:	07 d0       	rcall	.+14     	; 0x250 <__divmodhi4_neg1>
 242:	77 fd       	sbrc	r23, 7
 244:	09 d0       	rcall	.+18     	; 0x258 <__divmodhi4_neg2>
 246:	0e 94 30 01 	call	0x260	; 0x260 <__udivmodhi4>
 24a:	07 fc       	sbrc	r0, 7
 24c:	05 d0       	rcall	.+10     	; 0x258 <__divmodhi4_neg2>
 24e:	3e f4       	brtc	.+14     	; 0x25e <__divmodhi4_exit>

00000250 <__divmodhi4_neg1>:
 250:	90 95       	com	r25
 252:	81 95       	neg	r24
 254:	9f 4f       	sbci	r25, 0xFF	; 255
 256:	08 95       	ret

00000258 <__divmodhi4_neg2>:
 258:	70 95       	com	r23
 25a:	61 95       	neg	r22
 25c:	7f 4f       	sbci	r23, 0xFF	; 255

0000025e <__divmodhi4_exit>:
 25e:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000260 <__udivmodhi4>:
 260:	aa 1b       	sub	r26, r26
 262:	bb 1b       	sub	r27, r27
 264:	51 e1       	ldi	r21, 0x11	; 17
 266:	07 c0       	rjmp	.+14     	; 0x276 <__udivmodhi4_ep>

00000268 <__udivmodhi4_loop>:
 268:	aa 1f       	adc	r26, r26
 26a:	bb 1f       	adc	r27, r27
 26c:	a6 17       	cp	r26, r22
 26e:	b7 07       	cpc	r27, r23
 270:	10 f0       	brcs	.+4      	; 0x276 <__udivmodhi4_ep>
 272:	a6 1b       	sub	r26, r22
 274:	b7 0b       	sbc	r27, r23

00000276 <__udivmodhi4_ep>:
 276:	88 1f       	adc	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	5a 95       	dec	r21
 27c:	a9 f7       	brne	.-22     	; 0x268 <__udivmodhi4_loop>
 27e:	80 95       	com	r24
 280:	90 95       	com	r25
 282:	bc 01       	movw	r22, r24
 284:	cd 01       	movw	r24, r26
 286:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000324 <_fini>:
 324:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000326 <__funcs_on_exit>:
 326:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000328 <__simulator_exit>:
 328:	08 95       	ret

Disassembly of section .text.exit:

000002de <exit>:
 2de:	ec 01       	movw	r28, r24
 2e0:	0e 94 93 01 	call	0x326	; 0x326 <__funcs_on_exit>
 2e4:	0e 94 92 01 	call	0x324	; 0x324 <_fini>
 2e8:	ce 01       	movw	r24, r28
 2ea:	0e 94 94 01 	call	0x328	; 0x328 <__simulator_exit>
 2ee:	ce 01       	movw	r24, r28
 2f0:	0e 94 90 01 	call	0x320	; 0x320 <_Exit>

Disassembly of section .text._Exit:

00000320 <_Exit>:
 320:	0e 94 62 00 	call	0xc4	; 0xc4 <_exit>
